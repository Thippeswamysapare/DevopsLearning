Git notes:
1. It is a version control system[VCS] or source code managament[SCM]
2. It is used for track the changes in files
3. It is a platfom independent
4. It is free and open source
5. They can handle large projects efficiently

[v1] -->[v2] --> [v3]

1. Git Stages:

Working directory : git add
	a. In this stage git is only aware of having files in he project
	b. Modified means that you have changed the file but not  committed
	
Staging area : git commit
	a. The staging are is like a rough draft space, it is where you can  git add the  version of a file
	
Repository :
	a. It has all the project related data
	3. It contains the collection of the files and also history of changes made to those files

Types of Repos:		   
Local Repo   : A repository where user can create/modify/delete the files 
Central Repo : A repository where all developers code is stored/pushed
Remote Repo  : A seperate repository where user can store the code and shared with other developer 
			   without notice to all developers
			   Ex: dev1 want to share his code with dev-4 without notice to dev-2 and dev-3
			   
			   
2. Git installation:
	a. yum install git -y
	b. git init.  ---> will create local empty git repository
				
				
3. Steps to commit a file:
create file	     			 : touch <file-name>   or cat <file-name>  or vim <file-name>
create multiple files 			 : tourch disha {1 .. 4} ->will create files as disha1, disha2, disha3, disha4
check file status			 : git status 
Add that file    			 : git add.
commit the file with message 		 : git commit -m "commint message" filename
to see details of that file 		 : git log

adding files:
add a single file 			: git add "file-name"
add	multiple files			: git add .
untrack a single file			: git restore --staged <filename>
untrack all files 			: git restore --staged .
adding files with same name		: git add disha*
commit files with same name 		: git commit -m "commint message" filename*

4. Configuration of users:
If you want to give username and e-mail id to those commits then
	a. Git config user.name "username"
	b. git config user.email "abc@gmail.com"
	
5. Ignoring content: files not to track or commit
	It will be helpful when you don't want to track some specific filesthen we use file called .gitignore
	vi .gitignore
	Now all the text files will be ignored
	All files added to ignored command:  
			  vi .gitignore
			  press i
			  disha*
			  Esc  colon[:] wq
			  git status
			  
	specific files to be ignored command:
			   vi .gitignore
			   press i
			   disha1
			   disha2
			   Esc : wq
			   git status
			  
to see hidden file :  ls -all

6. Git Branches
	a. A branch represent a independent line of development
	b. The git branch command lets you create , list ,rename and delete branches
	c. The default branch name in Git is MASTER

-> To see current branch		: git branch
-> To add a new branch			: git branch branch-name
-> To switch branches			: git checkout -b branch-name
-> To create & switch at a time 	: git checkout -b branch-name
-> To rename a branch			: git branch -m old new
-> to delete a branch			: git branch -d branch-name

The -d option will delete te branch only if it has already been pushed 
and merged with remote branch. Use -D instead if you want to force the branch to be deleted

Part-1              Part-2          Part-3
Local		    branches	    Central



7. Restore deleted files
		git restore disha*
		git restore disha1
		git status
		
8. Unstage the files
   git add shashi*
   git status
   
   git restore --staged shashi*
Git notes:
1. It is a version control system[VCS] or source code managament[SCM]
2. It is used for track the changes in files
3. It is a platfom independent
4. It is free and open source
5. They can handle large projects efficiently

[v1] -->[v2] --> [v3]

1. Git Stages:

Working directory : git add
	a. In this stage git is only aware of having files in he project
	b. Modified means that you have changed the file but not  committed
	
Staging area : git commit
	a. The staging are is like a rough draft space, it is where you can  git add the  version of a file
	
Repository :
	a. It has all the project related data
	3. It contains the collection of the files and also history of changes made to those files

Types of Repos:		   
Local Repo   : A repository where user can create/modify/delete the files 
Central Repo : A repository where all developers code is stored/pushed
Remote Repo  : A seperate repository where user can store the code and shared with other developer 
			   without notice to all developers
			   Ex: dev1 want to share his code with dev-4 without notice to dev-2 and dev-3
			   
			   
2. Git installation:
	a. yum install git -y
	b. git init.  ---> will create local empty git repository
				
				
3. Steps to commit a file:
create file	     			 : touch <file-name>   or cat <file-name>  or vim <file-name>
create multiple files 			 : tourch disha {1 .. 4} ->will create files as disha1, disha2, disha3, disha4
check file status			 : git status 
Add that file    			 : git add.
commit the file with message 		 : git commit -m "commint message" filename
to see details of that file  		 : git log

adding files:
add a single file 			: git add "file-name"
add	multiple files			: git add .
untrack a single file			: git restore --staged <filename>
untrack all files 			: git restore --staged .
adding files with same name		: git add disha*
commit files with same name 		: git commit -m "commint message" filename*

4. Configuration of users:
If you want to give username and e-mail id to those commits then
	a. Git config user.name "username"
	b. git config user.email "abc@gmail.com"
	
5. Ignoring content: files not to track or commit
	It will be helpful when you don't want to track some specific filesthen we use file called .gitignore
	vi .gitignore
	Now all the text files will be ignored
	All files added to ignored command:  
			  vi .gitignore
			  press i
			  disha*
			  Esc  colon[:] wq
			  git status
			  
	specific files to be ignored command:
			   vi .gitignore
			   press i
			   disha1
			   disha2
			   Esc : wq
			   git status
			  
to see hidden file :  ls -all

================================================


6. Git Branches
	a. A branch represent a independent line of development
	b. The git branch command lets you create , list ,rename and delete branches
	c. The default branch name in Git is MASTER

-> To see current branch		: git branch
-> To add a new branch			: git branch branch-name
-> To switch branches			: git checkout branch-name
-> To create & switch at a time 	: git checkout -b branch-name
-> To rename a branch			: git branch -m old new
-> to delete a branch			: git branch -d branch-name

The -d option will delete te branch only if it has already been pushed 
and merged with remote branch. Use -D instead if you want to force the branch to be deleted

Part-1              Part-2          Part-3
Local				branches		Central

=======================================
branch name	 Viyu	Riya	Shashi
created		  3	 3	 3	
add 		  3	 3       1
commit 		  3      2   	 1
---------------------------------------
github status 
when git push    3      2       1   
======================================== 

7. Restore deleted files
		git restore disha*
		git restore disha1
		git status
		
8. Unstage the files
   git add shashi*
   git status
   
   git restore --staged shashi*

=======================================================================
Git Hub

1. Github is a web based platfom used for version control
2. It simplifies the process of working with other people and males it easy to collaborate on projects
	Now if you want to pull your code to Github
	git remote add origin url
	git push origin branch-name
	Go to github and check the files that you have pushed
	
Adding local files to github
		git remote add origin <giturl>
		git push origin master
 stpes:
	git init
	create files
	git add filename
	git commit -m "comments" filename
	git remote add origin <remote github url>
	git push origin master